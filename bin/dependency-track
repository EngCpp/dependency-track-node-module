#!/usr/bin/env node
const {config} = require("../utils/Configurations");
const dependencyTrack = require("../index");
const fs = require("fs");
const path = require("path");

const ARGS_WHITELIST = ["-h", "-u", "-d", "-f", "-m", "-s", "--version"]
const CONFIGS_WHITELIST = ["--apiKey", "--dependencyTrackBaseUrl",
"--projectName", "--projectVersion", "--failOnError"]

let arguments = process.argv.slice(2);
let unknownOptions = arguments.filter(x => x.startsWith("-")).filter(x =>
  !( ARGS_WHITELIST.includes(x) || CONFIGS_WHITELIST.includes(x) )
);

if (arguments.includes("-h") || arguments.length <= 0 || unknownOptions.length > 0) {
    if (unknownOptions.length > 0) {
        console.warn("ERROR: Unknown option(s) " + unknownOptions.join(" ") );
    }
    console.log("Usage:  dependency-track [OPTIONS] [path]");
    console.log("Options:");
    console.log("  -h        - this help");
    console.log("  -u        - upload the bom");
    console.log("  -d        - delete, delete the current or any arbitrary project from the server");
    console.log("  -f        - findings, prints out some details of all of the current issues found in the scan");
    console.log("  -m        - metrics, Get and print all metrics from the server");
    console.log("  -s        - score, Get the Risk Score for the current project");
    console.log("  --version - print version number");
    process.exit(0);
}


// CONFIGS ---------------------------------------------------------------------

const loadConfig = (textKey, arguments) => {
  let keyIndex = arguments.indexOf(textKey);
  if (keyIndex > -1) {
     return arguments[keyIndex + 1];
  }

  return null;
}

config.apiKey = loadConfig("--apiKey", arguments) || config.apiKey;
config.baseUrl = loadConfig("--dependencyTrackBaseUrl", arguments) || config.baseUrl;
config.projectName = loadConfig("--projectName", arguments) || config.projectName;
config.projectVersion = loadConfig("--projectVersion", arguments) || config.projectVersion;
config.failOnError = loadConfig("--failOnError", arguments) || config.failOnError;

// OPTIONS --------------------------------------------------------------------

let uploadIndex = arguments.indexOf("-u");
if (uploadIndex > -1) {
    config.bomFilepath = arguments[uploadIndex + 1] || config.bomFilepath;
    dependencyTrack.uploadbom(response => {
      console.log("Bom file uploaded");
    });
}

let delProject = arguments.indexOf("-d");
if (delProject > -1) {
  dependencyTrack.deleteProject(response => {
    console.log(`Project [${config.projectName} - ${config.projectVersion}] has been deleted`);
  });
}

let findings = arguments.indexOf("-f");
let out = null;
if (findings > -1) {
  dependencyTrack.findings(response => {
    console.log(JSON.stringify(response, null, 2));
  });
}

let metrics = arguments.indexOf("-m");
if (metrics > -1) {
  dependencyTrack.metrics(response => {
    console.log(JSON.stringify(response, null, 2));
  });
}

let score = arguments.indexOf("-s");
while (score > -1) {
    console.warn("Score not implemented yet")
}

let printVersion = arguments.indexOf("--version");
if (printVersion > -1) {
    const packageJsonAsString = fs.readFileSync(path.join(__dirname, '../', 'package.json'), "utf-8");
    const packageJson = JSON.parse(packageJsonAsString);

    console.log(packageJson.version);
    process.exit(0);
}
